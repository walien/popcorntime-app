#!/usr/bin/env node

var fs = require('fs');
var verifyRequirements = require('./utils/verify-requirements');
var safeExec = require('./utils/child-process-wrapper.js').safeExec;
var path = require('path');

// Executes an array of commands one by one.
function executeCommands(commands, done, index) {
    index = (index == undefined ? 0 : index);
    if (index < commands.length) {
        var command = commands[index];
        if (command.message) {
            console.log(command.message);
        }

        var options = null;
        if (typeof command !== 'string') {
            options = command.options;
            command = command.command;
        }
        safeExec(command, options, executeCommands.bind(this, commands, done, index + 1));
    } else {
        done(null);
    }

}

function bootstrap() {
    var ppmInstallPath = path.resolve(__dirname, '..', 'ppm');
    if (!fs.existsSync(ppmInstallPath)) {
        fs.mkdirSync(ppmInstallPath);
    }

    if (!fs.existsSync(path.join(ppmInstallPath, 'node_modules'))) {
        fs.mkdirSync(path.join(ppmInstallPath, 'node_modules'));
    }

    var ppmPath = path.resolve(__dirname, '..', 'ppm', 'node_modules', 'popcorn-package-manager', 'bin', 'ppm')
    var ppmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? ' --no-color' : '';

    var npmPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm');
    var initialNpmCommand = fs.existsSync(npmPath) ? npmPath : 'npm';
    var npmFlags = ' --userconfig=' + path.resolve('.npmrc') + ' ';

    var buildInstallCommand = initialNpmCommand + npmFlags + 'install';
    var buildInstallOptions = {cwd: path.resolve(__dirname, '..', 'build')};

    var bowerPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'bower.cmd');
    var bowerPath2 = path.resolve(__dirname, '..', 'build', 'node_modules', 'bower', 'bin', 'bower');
    bowerPath = fs.existsSync(bowerPath) ? bowerPath : bowerPath2;

    var bowerInstallCommand = bowerPath + ' install --allow-root';
    var bowerInstallOptions = {cwd: path.resolve(__dirname, '..')};

    var ppmInstallCommand = npmPath + npmFlags + 'install';
    var ppmInstallOptions = {
        cwd: ppmInstallPath
    };

    var moduleInstallCommand = ppmPath + ' install' + ppmFlags;
    var dedupeNpmCommand = npmPath + npmFlags + 'dedupe';
    var dedupePpmCommand = ppmPath + ' dedupe' + ppmFlags;

    if (process.argv.indexOf('--no-quiet') === -1) {
        buildInstallCommand  += ' --quiet';
        moduleInstallCommand += ' --quiet';
        ppmInstallCommand += ' --quiet';
        dedupePpmCommand     += ' --quiet';
        dedupeNpmCommand     += ' --quiet';
        buildInstallOptions.ignoreStdout = true;
        ppmInstallOptions.ignoreStdout = true;
    }

    if (process.env.JANKY_SHA1 && process.platform === 'win32') {
        ppmInstallCommand += ' --arch=ia32';
    }

    var commands = [{
        command: buildInstallCommand,
        message: 'Installing build modules...',
        options: buildInstallOptions
    },{
        command: bowerInstallCommand,
        message: 'Installing bower packages...',
        options: bowerInstallOptions
    },
    {
        command: ppmInstallCommand,
        message: 'Installing ppm...',
        options: ppmInstallOptions
    },
    ppmPath + ' clean' + ppmFlags,
    moduleInstallCommand,
    dedupePpmCommand,
    {
        command: dedupeNpmCommand,
        options: {
            cwd: path.resolve(__dirname, '..', 'ppm', 'node_modules', 'popcorn-package-manager')
        }
    },
    {
        command: dedupeNpmCommand,
        options: {
            cwd: path.resolve(__dirname, '..')
        }
    }
    ];

    process.chdir(path.dirname(__dirname));
    executeCommands(commands, process.exit);
}

verifyRequirements(function(error, successMessage) {
    if (error) {
        console.log(error);
        process.exit(1);
    }

    console.log(successMessage);
    bootstrap();
});
